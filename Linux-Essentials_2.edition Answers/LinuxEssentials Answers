Section -4

Which of the following are Linux desktop environments? (Select all that apply.)

(A) GTK+
(B) GNOME
(C) KDE
(D) Evolution
(D) Xfce

B, C, E. GNOME, KDE, and Xfce are all Linux desktop environments.


If you want to enable one Linux computer to access files stored on another Linux computer's hard disk, which of the following network protocols is the best choice?

(A) SMTP
(B) NFS
(C) PHP
(D) DNS
(E) DHCP

B. The Network File System (NFS) was designed for exactly the task described in the question, so option B is correct. 

The Simple Mail Transfer Protocol (SMTP) enables one computer to send email messages to another computer, so it's a poor choice for achieving the stated goal and option A is incorrect. 
The PHP: Hypertext Processor (PHP) language is used to generate dynamic content for web pages, so option C is incorrect. 
The Domain Name System (DNS) is a protocol for delivering the mappings between hostnames and IP addresses to computers, so it won't easily achieve the stated goals, making option D incorrect.
The Dynamic Host Configuration Protocol (DHCP) enables one computer to provide network configuration information to another one over a network link, so option E is incorrect.


In which of the following languages was most of the Linux kernel written?

(A) Bash shell script
(B) Java
(C) C        ---correct
(D) C++
(E) Perl


OpenOffice.org forked from Calligra. --F 

LibreOffice forked from the pre-Apache version of OpenOffice.org in 2011. Calligra split from the KOffice office suite, which is no longer maintained.


Python is generally implemented as an interpreted language.  -T

Malicious outsiders can disrupt servers even if the computer that runs them is never broken into.  -T


SECTION 5

Which of the following commands provides the most information about your motherboard's features?	--lspci

Why might you want to partition a hard disk? (Select all that apply.)
	--To install more then one OS on the disk.  To separate filesystem data from swap space

Which of the following devices us not commonly attached via USB?
	Video monitors ---
	Scanners 
	External hard disks 
	Printers 
	Keyboards

An Intel 64 CPU is capable of running a Linux distribution identified as
being for the AMD64 CPU.

SECTION 6

What keystroke moves the cursor to the start of the line when typing a command in Bash?
Ctrl+A

FALSE     ---Pressing Alt+F2 in the GUI brings up a text-mode display that you can
use to log in to Linux. (TRUE Version : When in X, Ctrl must be added to the VT-switching keystroke, so the correct keystroke should be Ctrl+Alt+F2 (or other function keys, through )

TRUE	  ---You can force man to display a man page in a specific section of the manual by preceding the search name with the section number, as in man 5 passwd. 
(EXplanation: When you want to override man's search order, you specify the desired manual section between man and the command name, filename, or other name on which you're searching.)

FALSE	  ---info pages are a web-based documentation format.

FALSE	  ---Linux documentation in the /usr/share/doc directory tree is almost always in OpenDocument text format.
(False. Individual program authors decide on a documentation file format based on their own specific needs and preferences. Although some documents are in OpenDocument Text format, many documents are not.)

Each document in an info page is known as a(n) NODE.

The LOCATE command searches a database of filenames, enabling you to identify files quickly whose names match a term that you specify.

-----------

SECTION 7

1-  Which of the following commands would you type to rename newfile.txt to
afile.txt ?
A. mv newfile.txt afile.txt

2-  You want to copy a directory, MyFiles , to a USB flash drive that uses the FAT filesys-
tem. The contents of MyFiles are as follows:
$ ls -l MyFiles/
total 276
-rw-r–r– 1 jen users 129840 Nov 8 15:13 contract.odt
-rw-r–r– 1 rod users 42667 Nov 8 15:12 outline.pdf
-rw-r–r– 1 sam users 105979 Nov 8 15:12 Outline.PDF
The USB flash drive is mounted at /media/usb , and so you type cp -a MyFiles/
/media/usb . What problem will occur when you attempt to copy these files?

A. The command will fail because it tries to create links.
B. The MyFiles directory will be copied, but none of its files will be copied.
C. One file will be missing on the USB flash drive.
D. One file’s name will be changed during the copy.
E. Everything will be fine; the command will work correctly.

C. Because two files (outline.pdf and Outline.PDF) have names that differ only in case, and because FAT is a case-insensitive filesystem, one of those files will be missing on the copy. (Both files will be copied, but the second one copied will overwrite the first.) Thus option C is correct.

SECTION 8

Which of the following commands will print lines from the file world.txt that contain matches to changes and changed?

A) grep change[ds] world.txt ++

B) tar change[d-s] world.txt

C) find "change'd|s'" world.txt

D) cat world.txt changes changed

E) find change[^ds] world.txt

A. The grep utility finds matching text within a file and prints those lines. It accepts regular expressions, which means that you can place in brackets the two characters that differ in the words for which you're looking


Which of the following redirection operators appends a program's standard output to an existing file without overwriting that file's original contents?

A) |

B) 2>

C) &>

D) >

E) >>


E. The >> operator appends standard output to a file, so option E is correct


You've received a tar archive called data79.tar from a colleague, but you want to check the names of the files it contains before extracting them. Which of the following commands would you use to do this?

A) tar uvf data79.tar

B) tar cvf data79.tar

C) tar xvf data79.tar

D) tar tvf data79.tar

E) tar Avf data79.tar

D. With the tar utility, the --list (t) command is used to read the archive and display its contents. The --verbose (v) option creates a verbose file listing, and --file (f) specifies the filename—data79.tar in this case. 

True/False
* The regular expression Linu[^x].*lds matches the string Linus Torvalds. 
True. The special characters [^x] match any single character except x, and .* matches any sequence of any characters. The string Linus Torvalds is just one of many strings to match the specified regular expression.

* The find command enables you to locate files based on their sizes.
True. You can use the -size n option in the find command to locate files based on their sizes.

* To compress files archived with zip, you must use an external compression program such as gzip or bzip2 in a pipeline with zip.
False. The zip utility creates or manipulates zip archive files. This file type supports compression directly, as does the zip program. Thus there's no need to involve another compression program to compress files archived with zip.

* The character that represents the start of a line in a regular expression is ________^_____.

* The _____cut________ command can extract specified data fields from a file's records.

* Complete the following command to redirect both standard output and a standard error from the bigprog program to the file out.txt.

$__&>___ bigprog out.txt

*The gzip, bzip2, and xz programs all perform ___lossless___ compression, in which the uncompressed data exactly matches the original precompression data.

SECTION 9 -NOTES

* two package systems, RPM and Debian, are common (although others exist as well).

* The Linux kernel l is the core of a Linux installation. The kernel manages memory, provides software with a way to access the hard disk, doles out CPU time, and performs other critical low-level tasks. The kernel is loaded early in the boot process, and it’s the kernel that’s responsible for managing every other piece of software on a running Linux computer.

* The init process is then responsible for starting all the other basic programs that Linux must run, such as the programs that manage logins and always-up servers

* Before you can manage processes, you must be able to identify them. The ps and top utilities can help you identify processes. In either case, you can search for processes in various ways, such as by  ame or by resource use. You may also want to identify how much memory your processes are consuming, which you can do with the free command.

* typing ps ax usually produces the desired information

* Although ps can return process priority and CPU use information, the program’s output is usually sorted by PID number, and it provides information at only a single moment in time.

* top sorts its entries by CPU use, and it updates its display every few seconds.

* The top command shows system summary information and information about the most CPU-intensive processes on a computer.

* Many programs that run in the background (daemons) write information about their normal operations to log files , which record such notes. Consulting log files can therefore be an important part of diagnosing problems with daemons.

* LOG is the file extension for an automatically produced file that contains a record of events from certain software and operating systems. While they can contain a number of things, log files are often used to show all events associated with the system or application that created them. For example, your backup program might keep log files showing exactly what happened (or didn’t happen) during a backup. Windows keeps all kinds of log files for its various services.

* Linux stores most log fi les in the /var/log directory tree.

* Not all programs log messages. Typically, only daemons do so; ordinary user programs display error messages in other ways—in GUI dialog boxes or in a text-mode terminal.

* The kernel ring buffer is something like a log file for the kernel; however, unlike other log files, it’s stored in memory rather than in a disk file. Like regular log files, its contents continue to change as the computer runs.

What is the usual name for the first process that the Linux kernel runs, aside from itself?
A. init ++
B. bash
C. cron
D. login
E. grub


Which of the following tools is best suited to installing a software package and all its dependencies on a Debian computer?

E. apt-get

Where do most log files reside on a Linux computer?

A. /var/log

* By default, the first process listed in top is currently consuming the most CPU time. --- TRUE

* The dmesg command may produce different output after a computer has been running for weeks after it first started ---TRUE

* Most Linux distributions maintain information on what packages are installed in the ___package database__ (two words)

* You’re using bash , and you type emacs to launch the emacs editor. In this case, emacs is bash ’s ___child__

* General system messages are likely to be found in /var/log/messages or /var/ log/_syslog__ , depending on your distribution.

SECTION 10

* For which type of file is nano least likely to be useful for examining or editing?

-> A LibreOffice word processing document

* Which keystrokes invoke the pico or nano search function? 

-> F6 , Ctrl-W

* How would you remove two lines of text from a file when using vi ?

-> In command mode, position the cursor on the first line and type 2dd.

* Unicode is useful for encoding most European languages but not not Asian languages. ->FALSE

* GUI text editors for ASCII are superior to text-mode ASCII text editors because the GUI editors support underlining, italics, and multiple fonts. -> FALSE

* If you have never used a text editor before, the nano text editor is usually the best one to learn first. -> TRUE

* ASCII supports _128_ unique characters (not including control characters).

* Three keystrokes that can initiate a search-and-replace operation in nano are F14,Ctrl+\ and  Esc+R

* While in vi's command mode, you can type __u_ to undo a change.

* To save a file and exit the vi text editor in command mode, type __ZZ__



SECTION 11

* grep : It locates fi les that contain the string you specify, or displays the lines that contain those strings in a single file.

* find : Whereas grep searches for patterns within the contents of files, find does so based on file names, ownership, and similar characteristics.

* cut : This command extracts text from fields in a file. It’s frequently used to extract variable information from a file whose contents are in a pattern. To use it, you pass it one or more options that specify what information you want, followed by one or more filenames.

* sed : This program provides many of the capabilities of a conventional text editor (such as search-and-replace operations) but via commands that can be typed at a command prompt or entered in a script.

* echo : Sometimes a script must provide a message to the user; echo is the tool to accomplish this goal. You can pass various options to echo or just a string to be shown to the user.

* Using Arguments
Variables that are passed to the script are frequently called parameters or arguments. They’re represented in the script by a dollar sign ( $ ) followed by a number from 0 up— $0 stands for the name of the script.

* Using Variables
Another type of variable is assigned within scripts—for instance, such variables can be set from the output of a command. These variables are also identified by leading dollar signs, but they’re typically given names that at least begin with a letter, such as $Addr or $Name

* Using Conditional Expression
Scripting languages support several types of conditional expressions. These enable a script to perform one of several actions contingent on a particular condition—typically the value of a variable.

* The if keyword’s conditional expression appears in brackets after the if keyword and can take many forms. For instance, 
-f file is true if file exists and is a regular file; 
-s file is true if file exists and has a size greater than 0;
string1 == string2 is true if the two strings have the same values.

* 
if [ -s /tmp/tempstuff ]
	then
		echo “/tmp/tempstuff found; aborting!”
		exit
fi

This fragment causes the script to exit if the file /tmp/tempstuff is present. The then keyword marks the beginning of a series of lines that execute only if the conditional is true, and fi ( if f backward) marks the end of the if f block. 
Such code may be useful if the script creates and then later deletes this file, because its presence indicates that a previous run of the script didn’t succeed or is still underway.

*
case word in
pattern1 ) command(s) ;;
pattern2 ) command(s) ;;
...
esac

You can match an arbitrary number of patterns in this way. Each set of commands must end with a double semicolon ( ;; ), and the case statement as a whole ends in the string esac ( case backward).

*Using Loops

#!/bin/bash
for d in `ls *.wav`; do
aplay $d
done

The for loop as used here executes once for every item in the list generated by ls *.wav . Each of those items (fi lenames) is assigned in turn to the $d variable and so is passed to the aplay command.

The seq command can be useful in creating for loops (and in other ways too).
This command generates a list of numbers starting from its first argument and continuing to its last one.

For instance, typing "seq 1 10" generates 10 lines, each with a number between 1 and 10.

*Using Function

This script accepts a target and a destination fi lename and must pass those fi lenames to the functions.

#/bin/bash

doit() {
	cp $1 $2
}
function check() {
	if [ -s $2 ]
		then
			echo “Target file exists! Exiting!”
			exit
	fi
}

check $1 $2
doit $1 $2

* Setting the Script’s Exit Value

if the script detects an error or if the user selects an option to terminate, you can call exit to quit.

----

Questions

1) After using a text editor to create a shell script, what step should you take before trying to use the script by typing its name?

A) Set one or more executable bits using chmod. 		++
B) Copy the script to the /usr/bin/scripts directory.
C) Compile the script by typing bash scriptname, where scriptname is the script's name.
D) Run a virus checker on the script to be sure it contains no viruses.
E) Run a spell checker on the script to ensure it contains no bugs.

Scripts, like binary programs, normally have at least one executable bit set, although they can be run in certain ways without this feature, so option A is correct. 

There is no standard /usr/bin/scripts directory, and scripts can reside in any directory, so option B is incorrect. Scripts are interpreted programs, which means that they don't need to be compiled. Typing bash scriptname will run the script; option C is incorrect. Viruses are extremely rare in Linux, and because you just created the script, the only ways in which it could possibly contain a virus would be if your system was already infected or if you wrote it as a virus. Thus option D is incorrect. Most spell checkers are intended for English or other human languages, so they lack valid Bash commands such as esac. Furthermore, even if every keyword is spelled correctly, the script could contain bugs. Thus option E is incorrect.

2) Describe the ef fec t of the following short script, cp1 , if it ’s called as
cp1 big.c big.cc :

#!/bin/bash
cp $2 $1

A. It has the same effect as the cp command—copying the contents of big.c to big.cc .
B. It compiles the C program big.c and calls the result big.cc .
C. It copies the contents of big.cc to big.c , eliminating the old big.c .		++
D. It converts the C program big.c into a C++ program called big.cc .
E. The script’s first line is invalid, so it won’t work.

C. The cp command is the only one called in the script, and that command copies files. Because the script passes the arguments ($1 and $2) to cp in reverse order, their effect is reversed—whereas cp copies its first argument to the second name, the cp1 script copies the second argument to the first name. Option C correctly describes this effect.

Option A ignores the reversed order of the arguments, so this option is incorrect. The cp command has nothing to do with compiling C or C++ programs, and neither does the script, making option B incorrect. Since cp is a simple file-copying command, it can't convert a C program into a C++ program, making option D incorrect. The script's first line is a valid shebang line, contrary to option E, so that option is incorrect.

3) What is the purpose of conditional expressions in shell scripts?

A. They prevent scripts from executing if license conditions aren’t met.
B. They display information about the script’s computer environment.
C. They enable the script to take different actions in response to variable data.	++
D. They enable scripts to learn in a manner reminiscent of Pavlovian
conditioning.
E. They cause scripts to run only at specified times of day.

C. Conditional expressions return a true or false response, enabling the script to execute one set of instructions or another or to terminate or continue a loop. Option C is another way of saying this, and so it is correct. 
Conditional expressions have nothing to do with license conditions (option A), displaying information on the environment (option B), Pavlovian conditioning (option D), or executing the script at certain times of day (option E). That said, conditional expressions could be used in the service of any of these goals, but that's not their purpose.

True / False

(False) A user types myscript laser.txt to run a script called myscript. Within myscript, the $0 variable holds the value laser.txt.

	False. The $0 variable holds the name of the script—myscript in this example. To access the first parameter passed to the script (laser.txt), the script must use the $1 variable.

(True) Valid looping statements in Bash include for, while, and until.

	True. You can use for to execute a loop a fixed number of times, whereas while and until execute until a test condition is no longer met or is met, respectively.

(False) The following script launches three simultaneous instances of the terminal program.

terminal
terminal
terminal

The effect of the specified script is to launch three instances of terminal sequentially; the second launches only after the first terminates, and the third launches only after the second terminates. To do as the question specifies, you should include a trailing ampersand (&) in at least the first two calls to terminal (as in terminal &); this causes them to run in the background, so that the script can continue to execute to launch the remaining instances of terminal.


Q1) You've written a simple shell script that does nothing but launch programs. In order to ensure that the script works with most user shells, what should its first line read?

#!/bin/sh

Q2) What command can you use to display prompts for a user in a shell script?

echo

Q3) What Bash scripting command can you use to control the program flow based on a variable that can take many values (such as all the letters of the alphabet)?

case

Q4) What Bash scripting command can you use to control the return value generated by a script, independent of the other commands used in the script?

exit

SECTION 12

Account Features
- Username
- Password
- UID ( In reality, the username is just a label that the computer displays to we numerically challenged humans.)
- GID (Accounts are tied to one or more groups, which are similar to accounts in many ways; however, a group is a collection of accounts.)
- Comment Field (The comment field d normally holds the user’s full name)
- Home Directory (/home/rich)
- Default Shell (A default shell l is associated with every account. In Linux, this shell is normally Bash ( /bin/bash )...)

- Last Password Change
- Days Until a Change Is Allowed
- Days of Warning Before Password Expiration
- Days Between Expiration and Deactivation
- Expiration Date
- Special Flag

The /etc/shadow file is usually stored with restrictive permissions, with ownership by root.
By contrast, /etc/passwd must be readable by ordinary users and usually has less-restrictive permissions.

Account information is scattered across several confi guration files, such as /etc/passwd, /etc/shadow , /etc/group , and possibly in other configuration files that refer to accounts.

if you’re searching for information on a specific account, you can use grep to find it in /etc/passwd , as in grep rich /etc/passwd to find information on any account that’s tied to a user with the username rich.

Understanding Groups
- Group name
- Password
- GID
- User list

Using Account Tools

$ whoami (It displays your current user ID)
$ id (If you need more information)
$ who (To learn who is online)

rm command. If you mistype an rm command as an ordinary user, you can accidentally delete your own files but not system files.

Log in as root: Some distributions don’t allow root to log in directly by default because it’s dangerous.

Use su : The su command enables you to change your identity within a shell. Type su username to change your identity to that of the specified username.

Some distributions, such as Ubuntu, rely heavily on sudo and don’t permit direct root logins by default.

Q1 ) What is the purpose of the system account with a UID of 0?

A) It's the system administration account. +++
B) It's the account for the first ordinary user.
C) Nothing; UID 0 is left intentionally undefined.
D) It varies from one distribution to another.
E) It's a low-privilege account that's used as a default by some servers.

A. UID 0 is reserved for the system administrator's account, also known as root, so option A is correct. 
The first ordinary user account is not a system account, and its UID is normally 500 or 1000, depending on the distribution, so option B is incorrect. Because A is correct, C cannot be correct. The association of UID 0 for administrative tasks is basic in Linux, so you won't find variation on this score, making option D incorrect. Option E describes the nobody account, which does not have a UID of 0.

Q2 ) What type of information will you find in /etc/passwd for ordinary user accounts?
(Select all that apply.)

A. A user ID (UID) number  +++
B. A complete listing of every group to which the user belongs
C. The path to the account’s home directory  +++
D. The path to the account’s default GUI desktop environment
E. The path to the account’s default text-mode shell  +++

A, C, E. The /etc/passwd file's fields specify the username, an encrypted password (or x to denote use of shadow passwords, which is more common), a UID number (option A), a single default GID number, a comment field that normally holds the user's full name, the path to the account's home directory (option C), and the path to the account's default text-mode shell (option E). Option B is incorrect because, although /etc/passwd includes the user's default group, the user may belong to additional groups that are defined elsewhere. Option D is incorrect because the user's default desktop environment is defined in the user's home directory, not in /etc/password.

Q3 ) You want to run the command cat /etc/shadow as root , but you’re logged in as an ordinary user. Which of the following commands will do the job, assuming that the system is configured to give you root access via the appropriate command?

A. sudo cat /etc/shadow  +++
B. root cat /etc/shadow
C. passwd cat /etc/shadow
D. su cat /etc/shadow
E. admin cat /etc/shadow

TRUE / FALSE

* whoami provides more information than id. (FALSE)

The whoami command displays your username only. The id command displays your username, your UID number, your primary group name, your primary GID number, and the group names and GID numbers of all your groups.

* Linux stores information on its groups in the /etc/groups file. (FALSE)

The name for the group data file in Linux is /etc/group, not /etc/groups.

* As a general rule, you should employ extra care when running programs as root. (TRUE)

*The file that associates usernames with UID numbers in Linux is ___/etc/passwd__. (Provide the complete path to the file.)

* To learn who is currently logged into the computer and what programs they’re currently running, you can type _w (who) _.

* UIDs below 500 or 1,000 (depending on the distribution) are reserved for use by ___system__ accounts.

* A(n) __nonrepudiation__ environment means that a person cannot deny actions, and the sudo command helps establish this environment.
